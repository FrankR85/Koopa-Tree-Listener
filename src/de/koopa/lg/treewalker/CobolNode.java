package de.koopa.lg.treewalker;
import java.util.Optional;
public enum CobolNode {
			eventPointer("eventPointer", "eventPointer"),
			blankClause("blankClause", "blankClause"),
			dtAtPositioning("dtAtPositioning", "dtAtPositioning"),
			screenEntryPhrase("screenEntryPhrase", "screenEntryPhrase"),
			standardPhrase("standardPhrase", "standardPhrase"),
			execSQLStatement("execSQLStatement", "execSQLStatement"),
			transformStatement("transformStatement", "transformStatement"),
			enableStatement("enableStatement", "enableStatement"),
			functionSpecifier("functionSpecifier", "functionSpecifier"),
			echoPhrase("echoPhrase", "echoPhrase"),
			waitStatement("waitStatement", "waitStatement"),
			dataOutput("dataOutput", "dataOutput"),
			destinationClause("destinationClause", "destinationClause"),
			usingOrChainingPhrase("usingOrChainingPhrase", "usingOrChainingPhrase"),
			fdFileDescriptionEntry("fdFileDescriptionEntry", "fdFileDescriptionEntry"),
			signType("signType", "signType"),
			cdName("cdName", "cdName"),
			compilerDisplayStatement("compilerDisplayStatement", "compilerDisplayStatement"),
			entryStatement("entryStatement", "entryStatement"),
			abbreviatedConjunction("abbreviatedConjunction", "abbreviatedConjunction"),
			TOKEN_VARYING("TOKEN_VARYING", "VARYING"),
			alphanumeric("alphanumeric", "alphanumeric"),
			rollbackStatement("rollbackStatement", "rollbackStatement"),
			usageClause("usageClause", "usageClause"),
			greaterOrEqualOp("greaterOrEqualOp", "greaterOrEqualOp"),
			dataDescriptionEntry_format3_and_4("dataDescriptionEntry_format3_and_4", "dataDescriptionEntry_format3_and_4"),
			subtraction_format2("subtraction_format2", "subtraction_format2"),
			beforeReportingDeclarative("beforeReportingDeclarative", "beforeReportingDeclarative"),
			subtraction_format3("subtraction_format3", "subtraction_format3"),
			qualifiedLinageCounter("qualifiedLinageCounter", "qualifiedLinageCounter"),
			pageClause("pageClause", "pageClause"),
			subtraction_format1("subtraction_format1", "subtraction_format1"),
			rangeExpression("rangeExpression", "rangeExpression"),
			justificationPhrase("justificationPhrase", "justificationPhrase"),
			bitwiseInclusiveDisjunction("bitwiseInclusiveDisjunction", "bitwiseInclusiveDisjunction"),
			enumIdParagraph("enumIdParagraph", "enumIdParagraph"),
			object("object", "object"),
			stopStatement("stopStatement", "stopStatement"),
			writeStatement("writeStatement", "writeStatement"),
			nextGroupClause("nextGroupClause", "nextGroupClause"),
			unitPhrase("unitPhrase", "unitPhrase"),
			assignToClause("assignToClause", "assignToClause"),
			iteratorIdParagraph("iteratorIdParagraph", "iteratorIdParagraph"),
			functionPrototypeIdParagraph("functionPrototypeIdParagraph", "functionPrototypeIdParagraph"),
			relationSubject("relationSubject", "relationSubject"),
			endMarker("endMarker", "endMarker"),
			selectClause("selectClause", "selectClause"),
			callConvention("callConvention", "callConvention"),
			setStatement("setStatement", "setStatement"),
			paragraphStart("paragraphStart", "paragraphStart"),
			accessModeClause("accessModeClause", "accessModeClause"),
			commitStatement("commitStatement", "commitStatement"),
			term("term", "term"),
			sortStatement("sortStatement", "sortStatement"),
			nestedCopyStatement("nestedCopyStatement", "nestedCopyStatement"),
			likeMods("likeMods", "likeMods"),
			tallyingCharactersPhrase("tallyingCharactersPhrase", "tallyingCharactersPhrase"),
			functionDefinition("functionDefinition", "functionDefinition"),
			dataDescriptionEntry("dataDescriptionEntry", "dataDescriptionEntry"),
			localeIs("localeIs", "localeIs"),
			sourceComputerParagraph("sourceComputerParagraph", "sourceComputerParagraph"),
			cobolSwitch("cobolSwitch", "cobolSwitch"),
			assemblyAttributesParagraph("assemblyAttributesParagraph", "assemblyAttributesParagraph"),
			numericSignIs("numericSignIs", "numericSignIs"),
			operand("operand", "operand"),
			returningProcedurePhrase("returningProcedurePhrase", "returningProcedurePhrase"),
			justifiedClause("justifiedClause", "justifiedClause"),
			suppressClause("suppressClause", "suppressClause"),
			TOKEN_EQUAL("TOKEN_EQUAL", "EQUAL"),
			timeoutPhrase("timeoutPhrase", "timeoutPhrase"),
			attributeClause("attributeClause", "attributeClause"),
			parameterName("parameterName", "parameterName"),
			redefinesClause("redefinesClause", "redefinesClause"),
			TOKEN_TRUE("TOKEN_TRUE", "TRUE"),
			convertPhrase("convertPhrase", "convertPhrase"),
			foregroundPhrase("foregroundPhrase", "foregroundPhrase"),
			communicationDescriptionEntry("communicationDescriptionEntry", "communicationDescriptionEntry"),
			screenValueClause("screenValueClause", "screenValueClause"),
			controlPhrase("controlPhrase", "controlPhrase"),
			selectStatement("selectStatement", "selectStatement"),
			functionIdParagraph("functionIdParagraph", "functionIdParagraph"),
			roundedPhrase("roundedPhrase", "roundedPhrase"),
			dataDescriptionEntry_format2("dataDescriptionEntry_format2", "dataDescriptionEntry_format2"),
			dataDescriptionEntry_format1("dataDescriptionEntry_format1", "dataDescriptionEntry_format1"),
			sqlStatement("sqlStatement", "sqlStatement"),
			unlockStatement("unlockStatement", "unlockStatement"),
			TOKEN_BY("TOKEN_BY", "BY"),
			renamesClause("renamesClause", "renamesClause"),
			equalsOp("equalsOp", "equalsOp"),
			useStatement("useStatement", "useStatement"),
			commentEntry("commentEntry", "commentEntry"),
			setOther("setOther", "setOther"),
			classCondition("classCondition", "classCondition"),
			erasePhrase("erasePhrase", "erasePhrase"),
			boldPhrase("boldPhrase", "boldPhrase"),
			tallyingAllLeadingOrTrailingPhrase("tallyingAllLeadingOrTrailingPhrase", "tallyingAllLeadingOrTrailingPhrase"),
			sumClause("sumClause", "sumClause"),
			computeStatement("computeStatement", "computeStatement"),
			subtractStatement("subtractStatement", "subtractStatement"),
			declaratives("declaratives", "declaratives"),
			addition_format1("addition_format1", "addition_format1"),
			reverseVideoClause("reverseVideoClause", "reverseVideoClause"),
			relationOperand("relationOperand", "relationOperand"),
			notAtEnd("notAtEnd", "notAtEnd"),
			identifiedByStatement("identifiedByStatement", "identifiedByStatement"),
			alterationClause("alterationClause", "alterationClause"),
			notOnSizeError("notOnSizeError", "notOnSizeError"),
			blankPhrase("blankPhrase", "blankPhrase"),
			TOKEN_AND("TOKEN_AND", "AND"),
			addition_format3("addition_format3", "addition_format3"),
			addition_format2("addition_format2", "addition_format2"),
			backgroundColorClause("backgroundColorClause", "backgroundColorClause"),
			lockModeClause("lockModeClause", "lockModeClause"),
			methodIdParagraph("methodIdParagraph", "methodIdParagraph"),
			terminateStatement("terminateStatement", "terminateStatement"),
			fileSectionContents("fileSectionContents", "fileSectionContents"),
			locationPhrase("locationPhrase", "locationPhrase"),
			linePhrase("linePhrase", "linePhrase"),
			constantRecordClause("constantRecordClause", "constantRecordClause"),
			recordIsVaryingClause("recordIsVaryingClause", "recordIsVaryingClause"),
			programID("programID", "programID"),
			groupIndicateClause("groupIndicateClause", "groupIndicateClause"),
			retryPhrase("retryPhrase", "retryPhrase"),
			dataDivisionBody("dataDivisionBody", "dataDivisionBody"),
			searchStatement("searchStatement", "searchStatement"),
			cursorPhrase("cursorPhrase", "cursorPhrase"),
			promptPhrase("promptPhrase", "promptPhrase"),
			TOKEN_NEGATIVE("TOKEN_NEGATIVE", "NEGATIVE"),
			codeClause("codeClause", "codeClause"),
			valueTypeIdParagraph("valueTypeIdParagraph", "valueTypeIdParagraph"),
			thenBranch("thenBranch", "thenBranch"),
			noData("noData", "noData"),
			programIdParagraph("programIdParagraph", "programIdParagraph"),
			TOKEN_ANY("TOKEN_ANY", "ANY"),
			testPosition("testPosition", "testPosition"),
			TOKEN_THAN("TOKEN_THAN", "THAN"),
			whenSetToFalseClause("whenSetToFalseClause", "whenSetToFalseClause"),
			columnClause("columnClause", "columnClause"),
			constantEntry("constantEntry", "constantEntry"),
			labelDeclarative("labelDeclarative", "labelDeclarative"),
			valueClause("valueClause", "valueClause"),
			simpleCondition("simpleCondition", "simpleCondition"),
			factoryParagraph("factoryParagraph", "factoryParagraph"),
			collationClause("collationClause", "collationClause"),
			sortStatusClause("sortStatusClause", "sortStatusClause"),
			returningPhrase("returningPhrase", "returningPhrase"),
			interfaceSpecifier("interfaceSpecifier", "interfaceSpecifier"),
			execStatement("execStatement", "execStatement"),
			sentence("sentence", "sentence"),
			highlightClause("highlightClause", "highlightClause"),
			alphabetIs("alphabetIs", "alphabetIs"),
			sharingClause("sharingClause", "sharingClause"),
			verb("verb", "verb"),
			purgeStatement("purgeStatement", "purgeStatement"),
			callStatement("callStatement", "callStatement"),
			eventType("eventType", "eventType"),
			pictureString("pictureString", "pictureString"),
			equalToOp("equalToOp", "equalToOp"),
			recordingMode("recordingMode", "recordingMode"),
			fullPhrase("fullPhrase", "fullPhrase"),
			unstringStatement("unstringStatement", "unstringStatement"),
			reportSectionValueClause("reportSectionValueClause", "reportSectionValueClause"),
			qualifier("qualifier", "qualifier"),
			reportGroupTypeClause("reportGroupTypeClause", "reportGroupTypeClause"),
			integerConstant("integerConstant", "integerConstant"),
			evaluateStatement("evaluateStatement", "evaluateStatement"),
			blinkPhrase("blinkPhrase", "blinkPhrase"),
			onSizeError("onSizeError", "onSizeError"),
			specialNamesParagraph("specialNamesParagraph", "specialNamesParagraph"),
			paragraph("paragraph", "paragraph"),
			acceptFromCommandLine("acceptFromCommandLine", "acceptFromCommandLine"),
			execCICSStatement("execCICSStatement", "execCICSStatement"),
			fileControlEntry("fileControlEntry", "fileControlEntry"),
			readyTraceStatement("readyTraceStatement", "readyTraceStatement"),
			sectionName("sectionName", "sectionName"),
			conjunction("conjunction", "conjunction"),
			objectParagraph("objectParagraph", "objectParagraph"),
			defaultClause("defaultClause", "defaultClause"),
			gobackStatement("gobackStatement", "gobackStatement"),
			blankWhenZeroClause("blankWhenZeroClause", "blankWhenZeroClause"),
			alignedClause("alignedClause", "alignedClause"),
			tallyingPhrase("tallyingPhrase", "tallyingPhrase"),
			lockModeWithClause("lockModeWithClause", "lockModeWithClause"),
			compilerDirective("compilerDirective", "compilerDirective"),
			eventPhrase("eventPhrase", "eventPhrase"),
			suppressStatement("suppressStatement", "suppressStatement"),
			atEndOfPage("atEndOfPage", "atEndOfPage"),
			sdFileDescriptionEntry("sdFileDescriptionEntry", "sdFileDescriptionEntry"),
			examineStatement("examineStatement", "examineStatement"),
			paddingClause("paddingClause", "paddingClause"),
			programSpecifier("programSpecifier", "programSpecifier"),
			atom("atom", "atom"),
			TOKEN_POSITIVE("TOKEN_POSITIVE", "POSITIVE"),
			cursorIs("cursorIs", "cursorIs"),
			initiateStatement("initiateStatement", "initiateStatement"),
			execDLIStatement("execDLIStatement", "execDLIStatement"),
			negation("negation", "negation"),
			constant("constant", "constant"),
			ioSection("ioSection", "ioSection"),
			acceptScreenSizeData("acceptScreenSizeData", "acceptScreenSizeData"),
			subject("subject", "subject"),
			signClause("signClause", "signClause"),
			readStatement("readStatement", "readStatement"),
			TOKEN_IS("TOKEN_IS", "IS"),
			integer("integer", "integer"),
			ioControlParagraph("ioControlParagraph", "ioControlParagraph"),
			execHTMLStatement("execHTMLStatement", "execHTMLStatement"),
			enumDefinition("enumDefinition", "enumDefinition"),
			dtColPos("dtColPos", "dtColPos"),
			alphabetName("alphabetName", "alphabetName"),
			backgroundPhrase("backgroundPhrase", "backgroundPhrase"),
			whenOther("whenOther", "whenOther"),
			dtLineColPositioning("dtLineColPositioning", "dtLineColPositioning"),
			trailingSignPhrase("trailingSignPhrase", "trailingSignPhrase"),
			function("function", "function"),
			dtLinePos("dtLinePos", "dtLinePos"),
			procedureName("procedureName", "procedureName"),
			continuationOfStatement("continuationOfStatement", "continuationOfStatement"),
			setEnvironmentVariable("setEnvironmentVariable", "setEnvironmentVariable"),
			acceptMessageCount("acceptMessageCount", "acceptMessageCount"),
			subscript("subscript", "subscript"),
			genericStringDef("genericStringDef", "genericStringDef"),
			eventStatusIs("eventStatusIs", "eventStatusIs"),
			indexName("indexName", "indexName"),
			delegateName("delegateName", "delegateName"),
			invokeStatement("invokeStatement", "invokeStatement"),
			whileKeyModifier("whileKeyModifier", "whileKeyModifier"),
			performStatement("performStatement", "performStatement"),
			displayStatement("displayStatement", "displayStatement"),
			callPrototypeDefinition("callPrototypeDefinition", "callPrototypeDefinition"),
			convertingPhrase("convertingPhrase", "convertingPhrase"),
			TOKEN_INTO("TOKEN_INTO", "INTO"),
			standard1AlphabetType("standard1AlphabetType", "standard1AlphabetType"),
			externalClause("externalClause", "externalClause"),
			condition("condition", "condition"),
			procedureDivision("procedureDivision", "procedureDivision"),
			startStatement("startStatement", "startStatement"),
			recordName("recordName", "recordName"),
			debugDeclarative("debugDeclarative", "debugDeclarative"),
			workingStorageSection("workingStorageSection", "workingStorageSection"),
			sizePhrase("sizePhrase", "sizePhrase"),
			literalValue("literalValue", "literalValue"),
			fullClause("fullClause", "fullClause"),
			controlClause("controlClause", "controlClause"),
			moveStatement("moveStatement", "moveStatement"),
			recordKeyClause("recordKeyClause", "recordKeyClause"),
			configurationSection("configurationSection", "configurationSection"),
			threadLocalClause("threadLocalClause", "threadLocalClause"),
			raiseStatement("raiseStatement", "raiseStatement"),
			acceptFromDate("acceptFromDate", "acceptFromDate"),
			classIdParagraph("classIdParagraph", "classIdParagraph"),
			chainUsing("chainUsing", "chainUsing"),
			iteratorDefinition("iteratorDefinition", "iteratorDefinition"),
			times("times", "times"),
			elseBranch("elseBranch", "elseBranch"),
			directSubscript("directSubscript", "directSubscript"),
			footingClause("footingClause", "footingClause"),
			dependingOn("dependingOn", "dependingOn"),
			TOKEN_NOT("TOKEN_NOT", "NOT"),
			relativeKeyClause("relativeKeyClause", "relativeKeyClause"),
			scrollPhrase("scrollPhrase", "scrollPhrase"),
			environmentDivision("environmentDivision", "environmentDivision"),
			interfaceName("interfaceName", "interfaceName"),
			callUsing("callUsing", "callUsing"),
			blinkClause("blinkClause", "blinkClause"),
			recordKeyDefinition("recordKeyDefinition", "recordKeyDefinition"),
			disjunction("disjunction", "disjunction"),
			functionName("functionName", "functionName"),
			deleteFileStatement("deleteFileStatement", "deleteFileStatement"),
			goToStatement("goToStatement", "goToStatement"),
			usageOperand("usageOperand", "usageOperand"),
			objectComputerParagraph("objectComputerParagraph", "objectComputerParagraph"),
			interfaceIdParagraph("interfaceIdParagraph", "interfaceIdParagraph"),
			linesAtBottomClause("linesAtBottomClause", "linesAtBottomClause"),
			xmlGenerateStatement("xmlGenerateStatement", "xmlGenerateStatement"),
			copybookHoldingBehaviour("copybookHoldingBehaviour", "copybookHoldingBehaviour"),
			eraseClause("eraseClause", "eraseClause"),
			notOnEscape("notOnEscape", "notOnEscape"),
			until("until", "until"),
			callPrototypeIdParagraph("callPrototypeIdParagraph", "callPrototypeIdParagraph"),
			typedefClause("typedefClause", "typedefClause"),
			replacingPhrase("replacingPhrase", "replacingPhrase"),
			fillPhrase("fillPhrase", "fillPhrase"),
			TOKEN_REPLACING("TOKEN_REPLACING", "REPLACING"),
			sourceUnit("sourceUnit", "sourceUnit"),
			copybook("copybook", "copybook"),
			acceptFromOther("acceptFromOther", "acceptFromOther"),
			fileName("fileName", "fileName"),
			compilationGroup("compilationGroup", "compilationGroup"),
			metadata("metadata", "metadata"),
			cobolDevice("cobolDevice", "cobolDevice"),
			defaultRoundedClause("defaultRoundedClause", "defaultRoundedClause"),
			screenName("screenName", "screenName"),
			requiredPhrase("requiredPhrase", "requiredPhrase"),
			bitwiseExclusiveDisjunction("bitwiseExclusiveDisjunction", "bitwiseExclusiveDisjunction"),
			execTextDataStatement("execTextDataStatement", "execTextDataStatement"),
			typeNameTypeClause("typeNameTypeClause", "typeNameTypeClause"),
			relativeSubscript("relativeSubscript", "relativeSubscript"),
			globalClause("globalClause", "globalClause"),
			nextSentenceStatement("nextSentenceStatement", "nextSentenceStatement"),
			occursClause("occursClause", "occursClause"),
			replacingAllLeadingFirstOrTrailingPhrase("replacingAllLeadingFirstOrTrailingPhrase", "replacingAllLeadingFirstOrTrailingPhrase"),
			numericLiteral("numericLiteral", "numericLiteral"),
			classDefinition("classDefinition", "classDefinition"),
			initializeStatement("initializeStatement", "initializeStatement"),
			autoPhrase("autoPhrase", "autoPhrase"),
			displayTerminalFormat("displayTerminalFormat", "displayTerminalFormat"),
			notOnException("notOnException", "notOnException"),
			classIs("classIs", "classIs"),
			atEnd("atEnd", "atEnd"),
			invalidKey("invalidKey", "invalidKey"),
			assignClause("assignClause", "assignClause"),
			dataValue("dataValue", "dataValue"),
			propertyValue("propertyValue", "propertyValue"),
			exceedsOp("exceedsOp", "exceedsOp"),
			functionPrototype("functionPrototype", "functionPrototype"),
			sourceClause("sourceClause", "sourceClause"),
			alternateRecordKeyClause("alternateRecordKeyClause", "alternateRecordKeyClause"),
			displayStatement__("displayStatement__", "displayStatement__"),
			consoleIsCRT("consoleIsCRT", "consoleIsCRT"),
			valuetypeName("valuetypeName", "valuetypeName"),
			sizeModifier("sizeModifier", "sizeModifier"),
			recordContainsClause("recordContainsClause", "recordContainsClause"),
			acceptFromMnemonic("acceptFromMnemonic", "acceptFromMnemonic"),
			linesAtTopClause("linesAtTopClause", "linesAtTopClause"),
			multiplication_format2("multiplication_format2", "multiplication_format2"),
			multiplication_format1("multiplication_format1", "multiplication_format1"),
			ioSectionBody("ioSectionBody", "ioSectionBody"),
			valueTypeDefinition("valueTypeDefinition", "valueTypeDefinition"),
			literalRange("literalRange", "literalRange"),
			returnStatement("returnStatement", "returnStatement"),
			arithmeticExpression("arithmeticExpression", "arithmeticExpression"),
			relop("relop", "relop"),
			uponClause("uponClause", "uponClause"),
			declarativeSection("declarativeSection", "declarativeSection"),
			abbreviatedNegation("abbreviatedNegation", "abbreviatedNegation"),
			literal("literal", "literal"),
			paragraphName("paragraphName", "paragraphName"),
			errorDeclarative("errorDeclarative", "errorDeclarative"),
			deleteStatement("deleteStatement", "deleteStatement"),
			notAtEndOfPage("notAtEndOfPage", "notAtEndOfPage"),
			varying("varying", "varying"),
			constantEntry_level01("constantEntry_level01", "constantEntry_level01"),
			foregroundColorClause("foregroundColorClause", "foregroundColorClause"),
			repositoryParagraph("repositoryParagraph", "repositoryParagraph"),
			constantValueClause("constantValueClause", "constantValueClause"),
			levelNumber("levelNumber", "levelNumber"),
			gridPhrase("gridPhrase", "gridPhrase"),
			alphabetType("alphabetType", "alphabetType"),
			sectionStart("sectionStart", "sectionStart"),
			expression("expression", "expression"),
			classClause("classClause", "classClause"),
			withNoAdvancing("withNoAdvancing", "withNoAdvancing"),
			timePhrase("timePhrase", "timePhrase"),
			typeSpecifier("typeSpecifier", "typeSpecifier"),
			modeIsBlockPhrase("modeIsBlockPhrase", "modeIsBlockPhrase"),
			asciiAlphabetType("asciiAlphabetType", "asciiAlphabetType"),
			acceptStatement("acceptStatement", "acceptStatement"),
			division_format3("division_format3", "division_format3"),
			division_format1("division_format1", "division_format1"),
			division_format2("division_format2", "division_format2"),
			interfaceDefinition("interfaceDefinition", "interfaceDefinition"),
			propertyName("propertyName", "propertyName"),
			mergeStatement("mergeStatement", "mergeStatement"),
			withData("withData", "withData"),
			TOKEN_TO("TOKEN_TO", "TO"),
			recordDescriptionEntry("recordDescriptionEntry", "recordDescriptionEntry"),
			xmlSchemaIs("xmlSchemaIs", "xmlSchemaIs"),
			TOKEN_GIVING("TOKEN_GIVING", "GIVING"),
			justified("justified", "justified"),
			TOKEN_LENGTH("TOKEN_LENGTH", "LENGTH"),
			communicationSection("communicationSection", "communicationSection"),
			codeNameAlphabetType("codeNameAlphabetType", "codeNameAlphabetType"),
			zero("zero", "zero"),
			onEscape("onEscape", "onEscape"),
			conditionNameCondition("conditionNameCondition", "conditionNameCondition"),
			underlineClause("underlineClause", "underlineClause"),
			autoClause("autoClause", "autoClause"),
			lessThanOp("lessThanOp", "lessThanOp"),
			screenFromClause("screenFromClause", "screenFromClause"),
			offPhrase("offPhrase", "offPhrase"),
			fileStatusClause("fileStatusClause", "fileStatusClause"),
			formatClause("formatClause", "formatClause"),
			closeStatement("closeStatement", "closeStatement"),
			beepPhrase("beepPhrase", "beepPhrase"),
			delegateDefinition("delegateDefinition", "delegateDefinition"),
			byteLengthPhrase("byteLengthPhrase", "byteLengthPhrase"),
			exhibitStatement("exhibitStatement", "exhibitStatement"),
			dataDivision("dataDivision", "dataDivision"),
			TOKEN_FALSE("TOKEN_FALSE", "FALSE"),
			addStatement("addStatement", "addStatement"),
			standard2AlphabetType("standard2AlphabetType", "standard2AlphabetType"),
			explicitAlphabetType("explicitAlphabetType", "explicitAlphabetType"),
			name("name", "name"),
			blockContainsClause("blockContainsClause", "blockContainsClause"),
			inspectStatement("inspectStatement", "inspectStatement"),
			TOKEN_AFTER("TOKEN_AFTER", "AFTER"),
			objectSectionBody("objectSectionBody", "objectSectionBody"),
			copybookHoldingData("copybookHoldingData", "copybookHoldingData"),
			entryConventionClause("entryConventionClause", "entryConventionClause"),
			linageClause("linageClause", "linageClause"),
			reportName("reportName", "reportName"),
			replacingCharactersPhrase("replacingCharactersPhrase", "replacingCharactersPhrase"),
			exitStatement("exitStatement", "exitStatement"),
			unequalToOp("unequalToOp", "unequalToOp"),
			qualifiedDataName("qualifiedDataName", "qualifiedDataName"),
			codeSetClause("codeSetClause", "codeSetClause"),
			programPrototype("programPrototype", "programPrototype"),
			updatePhrase("updatePhrase", "updatePhrase"),
			TOKEN_OR("TOKEN_OR", "OR"),
			allocateStatement("allocateStatement", "allocateStatement"),
			varyingClause("varyingClause", "varyingClause"),
			omittedArgumentCondition("omittedArgumentCondition", "omittedArgumentCondition"),
			requiredClause("requiredClause", "requiredClause"),
			callGivingOrReturning("callGivingOrReturning", "callGivingOrReturning"),
			environmentDivisionBody("environmentDivisionBody", "environmentDivisionBody"),
			sendStatement("sendStatement", "sendStatement"),
			statement("statement", "statement"),
			attributeName("attributeName", "attributeName"),
			factor("factor", "factor"),
			figurativeConstant("figurativeConstant", "figurativeConstant"),
			TOKEN_FROM("TOKEN_FROM", "FROM"),
			valueOf("valueOf", "valueOf"),
			fileControlParagraph("fileControlParagraph", "fileControlParagraph"),
			readLockClause("readLockClause", "readLockClause"),
			assignUsingClause("assignUsingClause", "assignUsingClause"),
			ifStatement("ifStatement", "ifStatement"),
			pictureLocaleClause("pictureLocaleClause", "pictureLocaleClause"),
			identifier_format6("identifier_format6", "identifier_format6"),
			organizationClause("organizationClause", "organizationClause"),
			diskClause("diskClause", "diskClause"),
			decimalIsComma("decimalIsComma", "decimalIsComma"),
			reportGroupUsageClause("reportGroupUsageClause", "reportGroupUsageClause"),
			endOfStatementMarker("endOfStatementMarker", "endOfStatementMarker"),
			identifier_format1("identifier_format1", "identifier_format1"),
			identifier_format2("identifier_format2", "identifier_format2"),
			base("base", "base"),
			programDefinition("programDefinition", "programDefinition"),
			screenDescriptionEntry("screenDescriptionEntry", "screenDescriptionEntry"),
			communicationDescriptionEntry_format2("communicationDescriptionEntry_format2", "communicationDescriptionEntry_format2"),
			sameAsClause("sameAsClause", "sameAsClause"),
			communicationDescriptionEntry_format3("communicationDescriptionEntry_format3", "communicationDescriptionEntry_format3"),
			objectSection("objectSection", "objectSection"),
			dataRecords("dataRecords", "dataRecords"),
			relationObject("relationObject", "relationObject"),
			arithmeticClause("arithmeticClause", "arithmeticClause"),
			methodDefinition("methodDefinition", "methodDefinition"),
			fileDescriptionEntry("fileDescriptionEntry", "fileDescriptionEntry"),
			when("when", "when"),
			communicationDescriptionEntry_format1("communicationDescriptionEntry_format1", "communicationDescriptionEntry_format1"),
			capitalizationPhrase("capitalizationPhrase", "capitalizationPhrase"),
			screenSection("screenSection", "screenSection"),
			optionsParagraph("optionsParagraph", "optionsParagraph"),
			moreArithmeticOp("moreArithmeticOp", "moreArithmeticOp"),
			programName("programName", "programName"),
			environmentName("environmentName", "environmentName"),
			alterStatement("alterStatement", "alterStatement"),
			stringStatement("stringStatement", "stringStatement"),
			identifier("identifier", "identifier"),
			referenceModifier("referenceModifier", "referenceModifier"),
			threadLocalStorageSection("threadLocalStorageSection", "threadLocalStorageSection"),
			screenControlIs("screenControlIs", "screenControlIs"),
			readWithClause("readWithClause", "readWithClause"),
			specialNameStatement("specialNameStatement", "specialNameStatement"),
			recordClause("recordClause", "recordClause"),
			replacingInitClause("replacingInitClause", "replacingInitClause"),
			acceptScreenFormat("acceptScreenFormat", "acceptScreenFormat"),
			mnemonicName("mnemonicName", "mnemonicName"),
			classAttributesParagraph("classAttributesParagraph", "classAttributesParagraph"),
			reportDescriptionEntry("reportDescriptionEntry", "reportDescriptionEntry"),
			recordDelimiterClause("recordDelimiterClause", "recordDelimiterClause"),
			openStatement("openStatement", "openStatement"),
			currencySignIs("currencySignIs", "currencySignIs"),
			threadPointer("threadPointer", "threadPointer"),
			constraintsParagraph("constraintsParagraph", "constraintsParagraph"),
			notOnOverflow("notOnOverflow", "notOnOverflow"),
			tabPhrase("tabPhrase", "tabPhrase"),
			typeName("typeName", "typeName"),
			className("className", "className"),
			onException("onException", "onException"),
			divisionStart("divisionStart", "divisionStart"),
			segmentNumber("segmentNumber", "segmentNumber"),
			concatenatedLiteral("concatenatedLiteral", "concatenatedLiteral"),
			securePhrase("securePhrase", "securePhrase"),
			fileSection("fileSection", "fileSection"),
			computerName("computerName", "computerName"),
			factoryDefinition("factoryDefinition", "factoryDefinition"),
			cancelStatement("cancelStatement", "cancelStatement"),
			procedureDivisionHeader("procedureDivisionHeader", "procedureDivisionHeader"),
			crtStatusIs("crtStatusIs", "crtStatusIs"),
			passwordClause("passwordClause", "passwordClause"),
			basedClause("basedClause", "basedClause"),
			operatorDefinition("operatorDefinition", "operatorDefinition"),
			generateStatement("generateStatement", "generateStatement"),
			configurationSectionBody("configurationSectionBody", "configurationSectionBody"),
			programPrototypeIdParagraph("programPrototypeIdParagraph", "programPrototypeIdParagraph"),
			abbreviatedDisjunction("abbreviatedDisjunction", "abbreviatedDisjunction"),
			TOKEN_ELSE("TOKEN_ELSE", "ELSE"),
			reportSection("reportSection", "reportSection"),
			resetTraceStatement("resetTraceStatement", "resetTraceStatement"),
			delegateIdParagraph("delegateIdParagraph", "delegateIdParagraph"),
			propertySpecifier("propertySpecifier", "propertySpecifier"),
			anyLengthClause("anyLengthClause", "anyLengthClause"),
			symbolicChars("symbolicChars", "symbolicChars"),
			iteratorName("iteratorName", "iteratorName"),
			multiplyStatement("multiplyStatement", "multiplyStatement"),
			linkageSection("linkageSection", "linkageSection"),
			constantEntry_level78("constantEntry_level78", "constantEntry_level78"),
			intermediateRoundingClause("intermediateRoundingClause", "intermediateRoundingClause"),
			screenToClause("screenToClause", "screenToClause"),
			lengthPhrase("lengthPhrase", "lengthPhrase"),
			chainStatement("chainStatement", "chainStatement"),
			presentWhenClause("presentWhenClause", "presentWhenClause"),
			highPhrase("highPhrase", "highPhrase"),
			reversePhrase("reversePhrase", "reversePhrase"),
			dataReference("dataReference", "dataReference"),
			argument("argument", "argument"),
			secureClause("secureClause", "secureClause"),
			greaterThanOp("greaterThanOp", "greaterThanOp"),
			section("section", "section"),
			conditionName("conditionName", "conditionName"),
			serviceStatement("serviceStatement", "serviceStatement"),
			dataAddressIdentifier("dataAddressIdentifier", "dataAddressIdentifier"),
			operatorIdParagraph("operatorIdParagraph", "operatorIdParagraph"),
			notInvalidKey("notInvalidKey", "notInvalidKey"),
			space("space", "space"),
			nestedStatements("nestedStatements", "nestedStatements"),
			divideStatement("divideStatement", "divideStatement"),
			bitwiseConjunction("bitwiseConjunction", "bitwiseConjunction"),
			propertyClause("propertyClause", "propertyClause"),
			valueOfFileId("valueOfFileId", "valueOfFileId"),
			groupUsageClause("groupUsageClause", "groupUsageClause"),
			qualifiedReportCounter("qualifiedReportCounter", "qualifiedReportCounter"),
			cicsStatement("cicsStatement", "cicsStatement"),
			classControlParagraph("classControlParagraph", "classControlParagraph"),
			lineClause("lineClause", "lineClause"),
			localStorageSection("localStorageSection", "localStorageSection"),
			reportGroupDescriptionEntry("reportGroupDescriptionEntry", "reportGroupDescriptionEntry"),
			typedefName("typedefName", "typedefName"),
			classSpecifier("classSpecifier", "classSpecifier"),
			relationCondition("relationCondition", "relationCondition"),
			repeatedPhrase("repeatedPhrase", "repeatedPhrase"),
			invalidClause("invalidClause", "invalidClause"),
			onOverflow("onOverflow", "onOverflow"),
			receiveStatement("receiveStatement", "receiveStatement"),
			instanceDefinition("instanceDefinition", "instanceDefinition"),
			synchronizedClause("synchronizedClause", "synchronizedClause"),
			objectStorageSection("objectStorageSection", "objectStorageSection"),
			TOKEN_COMMENT("TOKEN_COMMENT", "COMMENT"),
			onStatement("onStatement", "onStatement"),
			delegateSpecifier("delegateSpecifier", "delegateSpecifier"),
			pictureClause("pictureClause", "pictureClause"),
			disableStatement("disableStatement", "disableStatement"),
			signCondition("signCondition", "signCondition"),
			cicsValue("cicsValue", "cicsValue"),
			enumName("enumName", "enumName"),
			compilerStatement("compilerStatement", "compilerStatement"),
			classType("classType", "classType"),
			validateStatusClause("validateStatusClause", "validateStatusClause"),
			lessOrEqualOp("lessOrEqualOp", "lessOrEqualOp"),
			xmlParseStatement("xmlParseStatement", "xmlParseStatement"),
			numeric("numeric", "numeric"),
			dataName("dataName", "dataName"),
			selectWhenClause("selectWhenClause", "selectWhenClause"),
			screenUsingClause("screenUsingClause", "screenUsingClause"),
			freeStatement("freeStatement", "freeStatement"),
			replacementTarget("replacementTarget", "replacementTarget"),
			lowPhrase("lowPhrase", "lowPhrase"),
			labelRecords("labelRecords", "labelRecords"),
			rewriteStatement("rewriteStatement", "rewriteStatement"),
			value("value", "value"),
			TOKEN_EQUALS("TOKEN_EQUALS", "EQUALS"),
			displayDeviceFormat("displayDeviceFormat", "displayDeviceFormat"),
			releaseStatement("releaseStatement", "releaseStatement"),
			copyOperandName("copyOperandName", "copyOperandName"),
			bellClause("bellClause", "bellClause"),
			methodName("methodName", "methodName"),
			nativeAlphabetType("nativeAlphabetType", "nativeAlphabetType"),
			TOKEN_EQUALSIGN("TOKEN_EQUALSIGN", "="),
			withDebuggingMode("withDebuggingMode", "withDebuggingMode"),
			ebcdicAlphabetType("ebcdicAlphabetType", "ebcdicAlphabetType"),
			alphanumericConstant("alphanumericConstant", "alphanumericConstant"),
			reportClause("reportClause", "reportClause"),
			parenthesizedCondition("parenthesizedCondition", "parenthesizedCondition"),
			reserveClause("reserveClause", "reserveClause"),
			continueStatement("continueStatement", "continueStatement"),
			compilerIfStatement("compilerIfStatement", "compilerIfStatement"),
			enumSpecifier("enumSpecifier", "enumSpecifier"),
			blankWhenZero("blankWhenZero", "blankWhenZero"),
			somethingFollowingAStatement("somethingFollowingAStatement", "somethingFollowingAStatement"),;

	private String nodeType, text;
	private CobolNode(String nodeType, String text) {
		this.nodeType = nodeType;
		this.text = text;
	}
	public String getType() {
		return nodeType;
	}
	public String getText() {
		return text;
	}

	public static Optional<CobolNode> getNode(String text) {
		for (CobolNode node : values()) {
			if (node.getText().equals(text)) {
				if (isAlsoAType(text)) {
					return Optional.empty();
				}
				return Optional.of(node);
			}
		}
		return Optional.empty();
	}

	private static boolean isAlsoAType(String text) {
		for (CobolNode node : values()) {
			if (node.getType().equals(text)) {
				return true;
			}
		}
		return false;
	}
}
